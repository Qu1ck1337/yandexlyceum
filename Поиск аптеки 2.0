import sys
from io import BytesIO
# Этот класс поможет нам сделать картинку из потока байт

import json
import requests
from PIL import Image

# Пусть наше приложение предполагает запуск:
# python search.py Москва, ул. Ак. Королева, 12
# Тогда запрос к геокодеру формируется следующим образом:
toponym_to_find = " ".join(sys.argv[1:])

geocoder_api_server = "http://geocode-maps.yandex.ru/1.x/"

geocoder_params = {
    "apikey": "40d1649f-0493-4b70-98ba-98533de7710b",
    "geocode": toponym_to_find,
    "format": "json"}

response = requests.get(geocoder_api_server, params=geocoder_params)

if not response:
    # обработка ошибочной ситуации
    pass

# Преобразуем ответ в json-объект
json_response = response.json()
# Получаем первый топоним из ответа геокодера.
# print(json.dumps(json_response, sort_keys=True, indent=4))
toponym = json_response["response"]["GeoObjectCollection"][
    "featureMember"][0]["GeoObject"]
# Координаты центра топонима:
toponym_coodrinates = toponym["Point"]["pos"]
# Долгота и широта:
toponym_longitude, toponym_lattitude = toponym_coodrinates.split(" ")

lower = json_response["response"]['GeoObjectCollection']['featureMember'][0]['GeoObject']['boundedBy']['Envelope']['lowerCorner'].split()
upper = json_response["response"]['GeoObjectCollection']['featureMember'][0]['GeoObject']['boundedBy']['Envelope']['upperCorner'].split()
delta = float(upper[0]) - float(lower[0]), float(upper[1]) - float(lower[1])
position = json_response["response"]['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
position = position.split()

search_api_server = "https://search-maps.yandex.ru/v1/"
api_key = "dda3ddba-c9ea-4ead-9010-f43fbc15c6e3"

address_ll = position

search_params = {
    "apikey": api_key,
    "text": "аптека",
    "lang": "ru_RU",
    "ll": f'{address_ll[0]},{address_ll[1]}',
    "type": "biz"
}

response1 = requests.get(search_api_server, params=search_params)
json_response1 = response1.json()
print(json.dumps(json_response1, sort_keys=True, indent=4))
coordinates1 = json_response1['features'][0]['geometry']['coordinates']
name = json_response1['features'][0]['properties']['CompanyMetaData']['Categories'][0]['name']
EveryDayTime = json_response1['features'][0]['properties']['CompanyMetaData']['Hours']['Availabilities'][0]['Everyday']
FromTime = json_response1['features'][0]['properties']['CompanyMetaData']['Hours']['Availabilities'][0]['Intervals'][0]['from']
ToTime = json_response1['features'][0]['properties']['CompanyMetaData']['Hours']['Availabilities'][0]['Intervals'][0]['to']
if not response:
    pass

# Собираем параметры для запроса к StaticMapsAPI:
map_params = {
    "ll": ",".join([toponym_longitude, toponym_lattitude]),
    "spn": f'{delta[0]},{delta[1]}',
    "l": "map",
    "pt": ",".join(position) + ',org~' + str(coordinates1[0]) + ',' + str(coordinates1[1])
}
map_api_server = "http://static-maps.yandex.ru/1.x/"
# ... и выполняем запрос
response = requests.get(map_api_server, params=map_params)

orgDelta = (abs(float(coordinates1[0]) - float(position[0])) + abs(float(coordinates1[1]) - float(position[1]))) * 111
print('Расстояние: ', orgDelta * 1000, 'метров')
if EveryDayTime:
    print('Режим работы: круглосуточно')
else:
    print('Режим работы: некруглосуточно')
print(f'Время: от {FromTime} до {ToTime}')


Image.open(BytesIO(
    response.content)).show()
# Создадим картинку
# и тут же ее покажем встроенным просмотрщиком операционной системы
